#!/usr/bin/env python3
"""
Update dwm status

Dependency:
- Colors depends on my status color patch
- Clickable status depends on my statuscmd patch

See https://github.com/OliverLew/dwm
"""

import glob
import imaplib
import os
import signal
import socket
import threading
import time

import dbus
from mpd import MPDClient, base
from libtmux.server import Server as TmuxServer
from libtmux.exc import LibTmuxException
from pyalsa import alsamixer
from Xlib import display


class Notification:
    def __init__(self):
        bus_name = "org.freedesktop.Notifications"
        obj_path = "/org/freedesktop/Notifications"
        bus = dbus.SessionBus()
        obj = bus.get_object(bus_name, obj_path)

        interface = dbus.Interface(obj, bus_name)
        self.notify_func = interface.get_dbus_method("Notify")

        interface_properties = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
        self.property_get = interface_properties.get_dbus_method("Get")

    def notify(self, summary, body="", icon="", value=None, urgency=1, timeout=3000):
        hints = {"urgency": urgency, "x-canonical-private-synchronous": "statusd"}
        if value is not None:
            body += "[" + "=" * (value // 2) + ">" + " " * (50 - value // 2) + "]"
        self.notify_func("statusd", 0, icon, summary, body, [], hints, timeout)

    def dunst_paused(self):
        # see dunstctl script from dunst project
        return self.property_get("org.dunstproject.cmd0", "paused").bit_count()


class Status:
    def __init__(self, segments, dwm=True, tmux=False, tmux_socket=None, padding=0):
        self.socket_file = "/tmp/statusd.socket"
        self.socket_bufsize = 32

        self.dwm = dwm
        self.tmux = tmux
        self.tmux_socket = tmux_socket
        self.padding = padding
        self.segments = segments

        self.event = threading.Event()
        self.status = ["" for _ in range(len(segments))]
        self.threads = []

        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.socket.bind(self.socket_file)
        self.socket.listen()

        self.notify = Notification()

        for index, segment in enumerate(segments):
            segment.event = self.event
            segment.notification = self.notify

            t = threading.Thread(target=self.loop(index))
            self.threads.append(t)

        socket_thread = threading.Thread(target=self.listen)
        self.threads.append(socket_thread)

        if dwm:
            self.dpy = display.Display()
            self.root = self.dpy.screen().root

        if tmux:
            self.tmuxserver = TmuxServer(socket_name=self.tmux_socket)

        signal.signal(signal.SIGINT, self.stop)
        signal.signal(signal.SIGTERM, self.stop)
        for sig in range(signal.SIGRTMIN, signal.SIGRTMAX + 1):
            signal.signal(sig, self.sighandler)

    def update(self, i, notify=False):
        segment = self.segments[i]
        fmts = segment.run(notify=notify)
        if fmts is None:
            return

        segstr = segment.fmtstr.format_map(fmts)
        if self.padding:
            segstr = " " * self.padding + segstr + " " * self.padding
        # TODO: only add those for dwm text
        # Special character for statuscmd patch
        segstr = chr(i + 1) + f"{segstr}" + chr(15)
        # Special character for status colors patch
        if segment.fgcolor:
            segstr = chr(segment.fgcolor + 16) + segstr
        if segment.bgcolor:
            segstr = chr(segment.bgcolor + 24) + segstr
        self.status[i] = segstr

    def sighandler(self, number, frame):
        index = number - signal.SIGRTMIN - 1
        if index < len(self.segments):
            self.update(index, notify=True)
            self.show()

    def loop(self, i):
        def loopfunc():
            while not self.event.is_set():
                self.update(i)
                self.event.wait(self.segments[i].interval)
        return loopfunc

    def listen(self):
        while not self.event.is_set():
            conn, addr = self.socket.accept()
            with conn:
                while True:
                    data = conn.recv(self.socket_bufsize)
                    if not data:
                        break
                    print(data.decode())
    def show(self):
        status_text = ''.join(self.status)

        if self.dwm:
            self.root.set_wm_name(status_text.encode())
            self.dpy.sync()

        if self.tmux:
            try:
                for session in self.tmuxserver.attached_sessions:
                    session.set_option("status-right", status_text)
            except LibTmuxException:  # probably no tmux running
                pass

    def start(self):
        for t in self.threads:
            t.start()

        while not self.event.is_set():
            curtime = time.time()
            nextsec = int(curtime + 0.5) + 1
            self.event.wait(nextsec - curtime)
            self.show()

    def stop(self, number, frame):
        self.event.set()
        self.socket.close()
        for t in self.threads:
            t.join()


class Segment:
    def __init__(self, fmtstr, interval=1, icons=[], fg=None, bg=None):
        self.interval = interval
        self.fmtstr = fmtstr
        self.icons = icons
        self.fgcolor = fg
        self.bgcolor = bg

    def run(self, notify=False):
        return {}


class ALSA(Segment):
    """
    Besides arguments for Segments class:
    `icons` could be a list of:
        one glyph, or
        two glyphs, for unmuted and muted state
    """

    def __init__(self, fmtstr, **kargs):
        super().__init__(fmtstr, **kargs)
        self.mixer = alsamixer.Mixer()
        self.mixer.attach()
        self.mixer.load()
        self.alsa = alsamixer.Element(self.mixer, 'Master')
        self.alsa_range = self.alsa.get_volume_range()

    def run(self, notify=False):
        self.mixer.handle_events()
        volume = self.alsa.get_volume()
        active = self.alsa.get_switch()
        vol = 100.0 * volume / self.alsa_range[1]
        if self.icons == []:
            icon = ""
        elif len(self.icons) == 1:
            icon = self.icons[0]
        elif len(self.icons) > 1:
            icon = self.icons[0] if active else self.icons[1]

        if notify:
            self.notification.notify(
                f"Volume: {vol:02.0f}",
                icon="audio-volume-high-symbolic",
                value=int(vol)
            )

        return {
            'vol': vol,
            'active': active,
            'icon': icon
        }


class AMDGPU(Segment):
    def __init__(self, fmtstr, **kargs):
        super().__init__(fmtstr, **kargs)
        self.gpu_clocks = []
        self.vram_clocks = []
        self.samples = kargs.get('samples', 20)
        self.smooth_time = kargs.get('smooth_time', 3)
        self.dir = "/sys/class/drm/card{}/device/".format(kargs.get('card', 0))

    def get(self, filename):
        path = os.path.join(self.dir, filename)
        if os.path.exists(path):
            return open(path).read().strip()

    def get_clock(self, filename):
        contents = self.get(filename).split('\n')
        line = next(filter(lambda x: x.strip().endswith('*'), contents))
        if line:
            return float(line.split()[1].removesuffix('Mhz'))

    def run(self, notify=False):
        for i in range(self.samples):
            self.gpu_clocks.append(self.get_clock('pp_dpm_sclk'))
            self.vram_clocks.append(self.get_clock('pp_dpm_mclk'))
            self.event.wait(1.0 / self.samples)
        self.gpu_clocks = self.gpu_clocks[-self.samples*self.smooth_time:]
        self.vram_clocks = self.vram_clocks[-self.samples*self.smooth_time:]
        fmts = {
            'gpu': float(self.get('gpu_busy_percent')),
            'gpufreq': sum(self.gpu_clocks) / len(self.gpu_clocks) / 1000,
            'vram': float(self.get('mem_info_vram_used')),
            'vram_total': float(self.get('mem_info_vram_total')),
            'vramfreq': sum(self.vram_clocks) / len(self.vram_clocks) / 1000
        }
        fmts['vram_perc'] = 100 * fmts['vram'] / fmts['vram_total']

        if notify:
            self.notification.notify(
                "vram:  {vram:5.1f} MB  / {vram_total:5.1f} MB\n".format_map(fmts) +
                "clock: {gpufreq:5.2f} GHz, {vramfreq:5.2f} GHz".format_map(fmts)
            )
        return fmts


class Backlight(Segment):
    def run(self, notify=False):
        for light in glob.glob("/sys/class/backlight/*"):
            try:
                current = open(light + "/brightness").read().strip()
                maximum = open(light + "/max_brightness").read().strip()
                backlight = 100.0 * float(current) / float(maximum)
            except (FileNotFoundError, ZeroDivisionError):
                continue

        if notify:
            self.notification.notify(
                f"Brightness: {backlight:02.0f}",
                icon="display-brightness-symbolic",
                value=int(backlight)
            )

        return {"backlight": backlight}


class Battery(Segment):
    def run(self, notify=False):
        fmts = {}
        for battery in glob.glob("/sys/class/power_supply/*/uevent"):
            uevent_list = [line.split('=') for line in open(battery)]
            uevent = {pair[0][13:]: pair[1].strip() for pair in uevent_list}
            for k in uevent:
                if uevent[k].isdigit():
                    uevent[k] = int(uevent[k])

            if uevent['TYPE'] == 'Mains':
                fmts['ac'] = uevent.get('ONLINE')
            elif uevent['TYPE'] == 'Battery':
                fmts['perc'] = uevent['CAPACITY']

                if uevent.get('ENERGY_NOW') and uevent.get('POWER_NOW'):
                    fmts['time'] = uevent['ENERGY_NOW'] / uevent['POWER_NOW']
                elif uevent.get('CURRENT_NOW') and uevent.get('CHARGE_NOW'):
                    fmts['time'] = uevent['CHARGE_NOW'] / uevent['CURRENT_NOW']
                else:
                    fmts['time'] = 0

        if notify:
            self.notification.notify(f"Battery: {fmts['perc']:02.0f}%\nTime: {fmts['time']:.1f}h")

        fmts['icon'] = self.icons[fmts.get('ac')][int((fmts['perc'] + 5) / 10)]
        return fmts


class CPU(Segment):
    def __init__(self, fmtstr, **kargs):
        super().__init__(fmtstr, **kargs)
        self.idle_old = 0
        self.total_old = 0

    def get_perc(self):
        line = open("/proc/stat").readline()
        cols = [float(c) for c in line.split()[1:]]
        idle = cols[3] + cols[4]
        total = sum(cols)

        diff_idle = idle - self.idle_old
        diff_total = total - self.total_old
        perc = (1 - diff_idle / diff_total) * 100

        self.idle_old = idle
        self.total_old = total

        return idle, total, perc

    def get_freq(self):
        freq = []
        for line in open("/proc/cpuinfo"):
            if line.startswith("cpu MHz"):
                freq.append(float(line.split()[-1]))
        return sum(freq) / len(freq) / 1000

    def run(self, notify=False):
        idle, total, perc = self.get_perc()
        freq = self.get_freq()
        return {
            'freq': freq,
            'idle': idle,
            'total': total,
            'perc': perc
        }


class Date(Segment):
    def run(self, notify=False):
        return {'date': time.strftime("%a %b %d %H:%M:%S")}


class Dunst(Segment):
    def run(self, notify=False):
        return {"icon": self.icons[self.notification.dunst_paused()]}


class IMAP(Segment):
    def __init__(self, fmtstr, email, passwd=None, passcmd=None, **kargs):
        super().__init__(fmtstr, **kargs)
        self.email = email

        default_server = "imap." + email.split("@")[1]
        self.server = kargs.get("server", default_server)

        default_port = imaplib.IMAP4_SSL_PORT
        self.port = kargs.get("port", default_port)

        if passwd:
            self.password = passwd
        elif passcmd:
            p = os.popen(passcmd.format(email=email))
            self.password = p.readline().strip()
            returncode = p.close()
            if returncode:
                print(f"command exits with return value {returncode}")
                exit(1)
        else:
            print("You have to either specify email password or provide a command")
            exit(1)

    def run(self, notify=False):
        try:
            with imaplib.IMAP4_SSL(self.server, self.port) as m:
                m.login(self.email, self.password)
                m.select()
                uids = m.search(None, 'UNSEEN')[1][0].decode().split()
                m.close()
                return {"unread": len(uids), "icon": self.icons[len(uids) == 0]}
        except (OSError, imaplib.IMAP4.abort, imaplib.IMAP4.error):
            pass


class Memory(Segment):
    def h(self, n):
        units = ['KB', "MB", "GB"]
        for unit in units:
            if n < 1024:
                return f"{n:.1f}{unit}"
            else:
                n /= 1024
        return f"{n:.1f}TB"

    def run(self, notify=False):
        meminfo = [line.split()[:2] for line in open('/proc/meminfo')]
        mem = {k[:-1]: int(v) for k, v in meminfo}

        total = mem['MemTotal']
        used = total - mem['MemAvailable']
        perc = 100 * (used / total)
        swap_total = mem['SwapTotal']
        swap_used = swap_total - mem['SwapFree']
        swap_perc = 100 * (swap_used / swap_total)

        fmts = {
            'used': self.h(used),
            'total': self.h(total),
            'perc': perc,
            'swap_used': self.h(swap_used),
            'swap_total': self.h(swap_total),
            'swap_perc': swap_perc
        }

        if notify:
            memstat = "Memory: {used:>8s}/{total:>8s} ({perc:.1f}%)"
            swapstat = "Swap:   {swap_used:>8s}/{swap_total:>8s} ({swap_perc:.1f}%)"
            self.notification.notify("\n".join([memstat, swapstat]).format_map(fmts))

        return fmts


class Mpd(Segment):
    def __init__(self, fmtstr, **kargs):
        super().__init__(fmtstr, **kargs)
        self.mpdclient = MPDClient()
        self.host = kargs.get("host", "localhost")
        self.port = kargs.get("port", 6600)
        self.connect()

    def connect(self):
        try:
            self.mpdclient.connect(self.host, self.port)
        except ConnectionRefusedError:  # probably mpd not started
            pass

    def run(self, notify=False):
        try:
            currentsong = self.mpdclient.currentsong()
            status = self.mpdclient.status()
            return {
                'song': currentsong.get('file', ''),
                'time': float(currentsong.get('time', 0)),
                'elapsed': float(status.get('elapsed', 0)),
                'status': status.get('state', ''),
                'icon': self.icons[0 if status.get('state', '') == "play" else 1]
            }
        except (base.ConnectionError, ConnectionResetError):  # mpd stopped
            self.connect()


class Network(Segment):
    # TODO: speed from /sys/class/net/<if>/statictics/{rx,tx}_bytes
    # TODO: SSID from iwd
    def run(self, notify=False):
        fmts = {'ethernet': 0, 'wlan': 0, 'level': 0, 'icon': self.icons[0][0]}
        netdir = "/sys/class/net"
        for iface in os.listdir(netdir):
            ipath = os.path.join(netdir, iface, "operstate")
            state = open(ipath).readline().strip()
            if iface.startswith('e') and state == "up":
                fmts['ethernet'] = 1
                fmts['icon'] = self.icons[1][0]
            if iface.startswith('w') and state == "up":
                fmts['wlan'] = 1
                fmts['icon'] = self.icons[0][0]
        wireless = "/proc/net/wireless"
        for line in open(wireless).readlines():
            line = line.strip()
            if line.startswith("wl"):
                level = float(line.split()[3])
                fmts['level'] = level
                # level-4 >= -60 > level-3 >= -67.5 > level-2 >= -75 > level-1
                ilevel = int((level + 80) / 7.5)
                fmts['icon'] = self.icons[0][min(max(ilevel, 0), 4)]

        if notify and fmts['wlan']:
            self.notification.notify("Wifi level: {}".format(fmts['level']))
        return fmts


def main():
    Status([
        Memory("󰍛 {perc:02.0f}", interval=5, fg=1),
        CPU("󰓅 {perc:02.0f}, {freq:0.1f}GHz"),
        AMDGPU("󰨜 {vram_perc:.1f} 󰎓 {gpu:02.0f}, {gpufreq:.2f}GHz", fg=2),
        ALSA("{icon} {vol:02.0f}", icons='󰕾󰖁', interval=5, fg=3),
        Backlight("󰃟 {backlight:02.0f}", interval=5, fg=4),
        # IMAP("{icon} {unread}", icons=["󰇮", "󰇰"], interval=60,
        # email="oliver_lew@outlook.com", passcmd="pass show mail/{email}"),
        Mpd("󰝚 {icon}", icons="󰏤󰐊󰓛", interval=5, fg=5),
        Battery("{icon} {perc:02.0f}", interval=5, fg=6,
                icons=['󰂎󰁺󰁻󰁼󰁽󰁾󰁿󰂀󰂁󰂂󰁹', '󰢟󰢜󰂆󰂇󰂈󰢝󰂉󰢞󰂊󰂋󰂅', "󱉞"]),
        Network("{icon}", icons=["󰤯󰤟󰤢󰤥󰤨", "󰈀"], fg=1),
        Date("󰃰 {date}", fg=6),
        Dunst("{icon}", icons="󰂞󰂛", interval=5, fg=6),
        Segment("󰣖", fg=6),
        Segment("󰍉", fg=6),
    ], padding=1, dwm=True, tmux="fbtmux").start()


if __name__ == "__main__":
    main()
